"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setStorybookAppProject = exports.getStorybookFrameworkPath = void 0;
const semver_1 = require("semver");
const path_1 = require("path");
function getStorybookFrameworkPath(uiFramework) {
    const serverOptionsPaths = {
        '@storybook/angular': '@storybook/angular/dist/ts3.9/server/options',
        '@storybook/react': '@storybook/react/dist/cjs/server/options',
        '@storybook/html': '@storybook/html/dist/cjs/server/options',
    };
    if (isStorybookV62onwards(uiFramework)) {
        return serverOptionsPaths[uiFramework];
    }
    else {
        return `${uiFramework}/dist/server/options`;
    }
}
exports.getStorybookFrameworkPath = getStorybookFrameworkPath;
function isStorybookV62onwards(uiFramework) {
    const storybookPackageVersion = require(path_1.join(uiFramework, 'package.json')).version;
    return semver_1.gte(storybookPackageVersion, '6.2.0-rc.4');
}
// see: https://github.com/storybookjs/storybook/pull/12565
// TODO: this should really be passed as a param to the CLI rather than env
function setStorybookAppProject(context, leadStorybookProject) {
    let leadingProject;
    // for libs we check whether the build config should be fetched
    // from some app
    if (context.workspace.projects[context.projectName].projectType === 'library') {
        // we have a lib so let's try to see whether the app has
        // been set from which we want to get the build config
        if (leadStorybookProject) {
            leadingProject = leadStorybookProject;
        }
        else {
            // do nothing
            return;
        }
    }
    else {
        // ..for apps we just use the app target itself
        leadingProject = context.projectName;
    }
    process.env.STORYBOOK_ANGULAR_PROJECT = leadingProject;
}
exports.setStorybookAppProject = setStorybookAppProject;
//# sourceMappingURL=utils.js.map