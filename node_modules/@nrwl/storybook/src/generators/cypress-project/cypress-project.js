"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectSchematic = exports.cypressProjectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const cypress_1 = require("@nrwl/cypress");
const project_name_1 = require("@nrwl/cypress/src/utils/project-name");
const utilities_1 = require("../../utils/utilities");
function cypressProjectGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const libConfig = devkit_1.readProjectConfiguration(tree, schema.name);
        const libRoot = libConfig.root;
        const cypressProjectName = `${schema.directory ? project_name_1.getUnscopedLibName(libRoot) : schema.name}-e2e`;
        const installTask = yield cypress_1.cypressProjectGenerator(tree, {
            name: cypressProjectName,
            project: schema.name,
            js: schema.js,
            linter: schema.linter,
            directory: schema.directory,
            standaloneConfig: schema.standaloneConfig,
        });
        const generatedCypressProjectName = project_name_1.getE2eProjectName(schema.name, libRoot, schema.directory);
        removeUnneededFiles(tree, generatedCypressProjectName, schema.js);
        addBaseUrlToCypressConfig(tree, generatedCypressProjectName);
        updateAngularJsonBuilder(tree, generatedCypressProjectName, schema.name);
        yield devkit_1.formatFiles(tree);
        return installTask;
    });
}
exports.cypressProjectGenerator = cypressProjectGenerator;
function removeUnneededFiles(tree, projectName, js) {
    const { sourceRoot } = devkit_1.readProjectConfiguration(tree, projectName);
    const fileType = js ? 'js' : 'ts';
    utilities_1.safeFileDelete(tree, `${sourceRoot}/integration/app.spec.${fileType}`);
    utilities_1.safeFileDelete(tree, `${sourceRoot}/support/app.po.${fileType}`);
}
function addBaseUrlToCypressConfig(tree, projectName) {
    const cypressConfigPath = `${devkit_1.readProjectConfiguration(tree, projectName).root}/cypress.json`;
    devkit_1.updateJson(tree, cypressConfigPath, (cypressConfig) => {
        cypressConfig.baseUrl = 'http://localhost:4400';
        return cypressConfig;
    });
}
function updateAngularJsonBuilder(tree, e2eProjectName, targetProjectName) {
    const project = devkit_1.readProjectConfiguration(tree, e2eProjectName);
    const e2eTarget = project.targets.e2e;
    project.targets.e2e = Object.assign(Object.assign({}, e2eTarget), { options: Object.assign(Object.assign({}, e2eTarget.options), { devServerTarget: `${targetProjectName}:storybook` }), configurations: {
            ci: {
                devServerTarget: `${targetProjectName}:storybook:ci`,
            },
        } });
    devkit_1.updateProjectConfiguration(tree, e2eProjectName, project);
}
exports.default = cypressProjectGenerator;
exports.cypressProjectSchematic = devkit_1.convertNxGenerator(cypressProjectGenerator);
//# sourceMappingURL=cypress-project.js.map