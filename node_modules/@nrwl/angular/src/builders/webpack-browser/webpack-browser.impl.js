"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const architect_1 = require("@angular-devkit/architect");
const build_angular_1 = require("@angular-devkit/build-angular");
const rxjs_1 = require("rxjs");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utils/buildable-libs-utils");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const project_graph_1 = require("@nrwl/workspace/src/core/project-graph");
const operators_1 = require("rxjs/operators");
const fs_1 = require("fs");
const webpack_merge_1 = require("webpack-merge");
function buildApp(options, context) {
    const { customWebpackConfig } = options, delegateOptions = tslib_1.__rest(options, ["customWebpackConfig"]);
    // If there is a path to custom webpack config
    // Invoke our own support for custom webpack config
    if (customWebpackConfig && customWebpackConfig.path) {
        const pathToWebpackConfig = devkit_1.joinPathFragments(context.workspaceRoot, customWebpackConfig.path);
        if (fs_1.existsSync(pathToWebpackConfig)) {
            return buildAppWithCustomWebpackConfiguration(delegateOptions, context, pathToWebpackConfig);
        }
        else {
            throw new Error(`Custom Webpack Config File Not Found!\nTo use a custom webpack config, please ensure the path to the custom webpack file is correct: \n${pathToWebpackConfig}`);
        }
    }
    const scheduledBuilder = context.scheduleBuilder('@angular-devkit/build-angular:browser', delegateOptions, {
        target: context.target,
        logger: context.logger,
    });
    return rxjs_1.from(scheduledBuilder).pipe(operators_1.switchMap((x) => x.result));
}
function buildAppWithCustomWebpackConfiguration(options, context, pathToWebpackConfig) {
    return build_angular_1.executeBrowserBuilder(options, context, {
        webpackConfiguration: (baseWebpackConfig) => {
            const customWebpackConfiguration = require(pathToWebpackConfig);
            return webpack_merge_1.merge(baseWebpackConfig, customWebpackConfiguration);
        },
    });
}
function run(options, context) {
    const { target, dependencies } = buildable_libs_utils_1.calculateProjectDependencies(project_graph_1.readCachedProjectGraph(), context);
    options.tsConfig = buildable_libs_utils_1.createTmpTsConfig(path_1.join(context.workspaceRoot, options.tsConfig), context.workspaceRoot, target.data.root, dependencies);
    return rxjs_1.of(buildable_libs_utils_1.checkDependentProjectsHaveBeenBuilt(context, dependencies)).pipe(operators_1.switchMap((result) => {
        if (result) {
            return buildApp(options, context);
        }
        else {
            // just pass on the result
            return rxjs_1.of({ success: false });
        }
    }));
}
exports.default = architect_1.createBuilder(run);
//# sourceMappingURL=webpack-browser.impl.js.map