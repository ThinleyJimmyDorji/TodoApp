"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageExecutor = exports.createLibraryExecutor = void 0;
const tslib_1 = require("tslib");
const ng = require("@angular/compiler-cli");
const project_graph_1 = require("@nrwl/workspace/src/core/project-graph");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const rxjs_for_await_1 = require("rxjs-for-await");
const operators_1 = require("rxjs/operators");
function initializeNgPackagr(options, context, projectDependencies) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const packager = (yield Promise.resolve().then(() => require('ng-packagr'))).ngPackagr();
        packager.forProject(path_1.resolve(context.root, options.project));
        if (options.tsConfig) {
            // read the tsconfig and modify its path in memory to
            // pass it on to ngpackagr
            const parsedTSConfig = ng.readConfiguration(options.tsConfig);
            buildable_libs_utils_1.updatePaths(projectDependencies, parsedTSConfig.options.paths);
            packager.withTsConfig(parsedTSConfig);
        }
        return packager;
    });
}
/**
 * Creates an executor function that executes the library build of an Angular
 * package using ng-packagr.
 * @param initializeNgPackagr function that returns an ngPackagr instance to use for the build.
 */
function createLibraryExecutor(initializeNgPackagr) {
    return function (options, context) {
        return tslib_1.__asyncGenerator(this, arguments, function* () {
            const { target, dependencies } = buildable_libs_utils_1.calculateProjectDependencies(project_graph_1.readCachedProjectGraph(), context.root, context.projectName, context.targetName, context.configurationName);
            if (!buildable_libs_utils_1.checkDependentProjectsHaveBeenBuilt(context.root, context.projectName, context.targetName, dependencies)) {
                return yield tslib_1.__await(Promise.resolve({ success: false }));
            }
            function updatePackageJson() {
                if (dependencies.length > 0 &&
                    options.updateBuildableProjectDepsInPackageJson) {
                    buildable_libs_utils_1.updateBuildableProjectPackageJsonDependencies(context.root, context.projectName, context.targetName, context.configurationName, target, dependencies, options.buildableProjectDepsInPackageJsonType);
                }
            }
            if (options.watch) {
                return yield tslib_1.__await(yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(rxjs_for_await_1.eachValueFrom(rxjs_1.from(initializeNgPackagr(options, context, dependencies)).pipe(operators_1.switchMap((packagr) => packagr.watch()), operators_1.tap(() => updatePackageJson()), operators_1.mapTo({ success: true })))))));
            }
            return yield tslib_1.__await(rxjs_1.from(initializeNgPackagr(options, context, dependencies))
                .pipe(operators_1.switchMap((packagr) => packagr.build()), operators_1.tap(() => updatePackageJson()), operators_1.mapTo({ success: true }))
                .toPromise());
        });
    };
}
exports.createLibraryExecutor = createLibraryExecutor;
exports.packageExecutor = createLibraryExecutor(initializeNgPackagr);
exports.default = exports.packageExecutor;
//# sourceMappingURL=package.impl.js.map