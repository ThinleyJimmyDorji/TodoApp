"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleFilePaths = exports.getModuleDeclaredComponents = void 0;
const devkit_1 = require("@nrwl/devkit");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const typescript_2 = require("typescript");
const ast_utils_1 = require("../../../utils/nx-devkit/ast-utils");
function getModuleDeclaredComponents(file, moduleFilePath, projectName) {
    const ngModuleDecorator = getNgModuleDecorator(file, moduleFilePath);
    const declarationsPropertyAssignment = getNgModuleDeclarationsPropertyAssignment(ngModuleDecorator, moduleFilePath, projectName);
    if (!declarationsPropertyAssignment) {
        return [];
    }
    const declarationsArray = getDeclarationsArray(file, declarationsPropertyAssignment, moduleFilePath, projectName);
    if (!declarationsArray) {
        return [];
    }
    return getDeclaredComponentsInDeclarations(declarationsArray);
}
exports.getModuleDeclaredComponents = getModuleDeclaredComponents;
function getModuleFilePaths(tree, projectPath) {
    let moduleFilePaths = [];
    devkit_1.visitNotIgnoredFiles(tree, projectPath, (filePath) => {
        if (filePath.endsWith('.module.ts')) {
            moduleFilePaths.push(filePath);
        }
    });
    return moduleFilePaths;
}
exports.getModuleFilePaths = getModuleFilePaths;
function getDeclaredComponentsInDeclarations(declarationsArray) {
    return declarationsArray
        .getChildren()
        .find((node) => node.kind === typescript_2.SyntaxKind.SyntaxList)
        .getChildren()
        .filter((node) => node.kind === typescript_2.SyntaxKind.Identifier)
        .map((node) => node.getText())
        .filter((name) => name.endsWith('Component'));
}
function getDeclarationsArray(file, declarationsPropertyAssignment, moduleFilePath, projectName) {
    let declarationArray = declarationsPropertyAssignment
        .getChildren()
        .find((node) => node.kind === typescript_2.SyntaxKind.ArrayLiteralExpression);
    if (!declarationArray) {
        // Attempt to follow a variable instead of the literal
        const declarationVariable = declarationsPropertyAssignment
            .getChildren()
            .filter((node) => node.kind === typescript_2.SyntaxKind.Identifier)[1];
        const variableName = declarationVariable.getText();
        const variableDeclaration = typescript_1.findNodes(file, typescript_2.SyntaxKind.VariableDeclaration).find((variableDeclaration) => {
            const identifier = variableDeclaration
                .getChildren()
                .find((node) => node.kind === typescript_2.SyntaxKind.Identifier);
            return identifier.getText() === variableName;
        });
        if (variableDeclaration) {
            declarationArray = variableDeclaration
                .getChildren()
                .find((node) => node.kind === typescript_2.SyntaxKind.ArrayLiteralExpression);
        }
        else {
            devkit_1.logger.warn(devkit_1.stripIndents `No stories generated because the declaration in ${moduleFilePath} is not an array literal or the variable could not be found. Hint: you can always generate stories later with the 'nx generate @nrwl/angular:stories --name=${projectName}' command.`);
        }
    }
    return declarationArray;
}
function getNgModuleDeclarationsPropertyAssignment(ngModuleDecorator, moduleFilePath, projectName) {
    const syntaxList = ngModuleDecorator.getChildren().find((node) => {
        return node.kind === typescript_2.SyntaxKind.SyntaxList;
    });
    const declarationsPropertyAssignment = syntaxList
        .getChildren()
        .find((node) => {
        return (node.kind === typescript_2.SyntaxKind.PropertyAssignment &&
            node.getChildren()[0].getText() === 'declarations');
    });
    if (!declarationsPropertyAssignment) {
        devkit_1.logger.warn(devkit_1.stripIndents `No stories generated because there were no components declared in ${moduleFilePath}. Hint: you can always generate stories later with the 'nx generate @nrwl/angular:stories --name=${projectName}' command.`);
    }
    return declarationsPropertyAssignment;
}
function getNgModuleDecorator(file, moduleFilePath) {
    const ngModuleDecorators = ast_utils_1.getDecoratorMetadata(file, 'NgModule', '@angular/core');
    if (ngModuleDecorators.length === 0) {
        throw new Error(`No @NgModule decorator in ${moduleFilePath}.`);
    }
    return ngModuleDecorators[0];
}
//# sourceMappingURL=module-info.js.map