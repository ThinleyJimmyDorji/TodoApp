"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getKnobType = exports.getComponentProps = exports.getInputPropertyDeclarations = void 0;
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const typescript_2 = require("typescript");
const ast_utils_1 = require("../../utils/nx-devkit/ast-utils");
function getInputPropertyDeclarations(tree, path) {
    const file = ast_utils_1.getTsSourceFile(tree, path);
    const decorators = typescript_1.getSourceNodes(file).filter((node) => node.kind === typescript_2.SyntaxKind.Decorator);
    return decorators
        .filter((decorator) => typescript_1.findNodes(decorator, typescript_2.SyntaxKind.Identifier).some((node) => node.getText() === 'Input'))
        .map((node) => node.parent);
}
exports.getInputPropertyDeclarations = getInputPropertyDeclarations;
function getComponentProps(tree, componentPath, getArgsDefaultValueFn) {
    const props = getInputPropertyDeclarations(tree, componentPath).map((node) => {
        const decoratorContent = typescript_1.findNodes(typescript_1.findNodes(node, typescript_2.SyntaxKind.Decorator)[0], typescript_2.SyntaxKind.StringLiteral);
        const name = decoratorContent.length
            ? decoratorContent[0].getText().slice(1, -1)
            : node.name.getText();
        const type = getKnobType(node);
        const defaultValue = getArgsDefaultValueFn(node);
        return {
            name,
            type,
            defaultValue,
        };
    });
    return props;
}
exports.getComponentProps = getComponentProps;
function getKnobType(property) {
    if (property.type) {
        const typeName = property.type.getText();
        const typeNameToKnobType = {
            string: 'text',
            number: 'number',
            boolean: 'boolean',
        };
        return typeNameToKnobType[typeName] || 'text';
    }
    if (property.initializer) {
        const initializerKindToKnobType = {
            [typescript_2.SyntaxKind.StringLiteral]: 'text',
            [typescript_2.SyntaxKind.NumericLiteral]: 'number',
            [typescript_2.SyntaxKind.TrueKeyword]: 'boolean',
            [typescript_2.SyntaxKind.FalseKeyword]: 'boolean',
        };
        return initializerKindToKnobType[property.initializer.kind] || 'text';
    }
    return 'text';
}
exports.getKnobType = getKnobType;
//# sourceMappingURL=storybook.js.map