"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStorybookTestWorkspaceForLib = void 0;
const tslib_1 = require("tslib");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
const testing_1 = require("@nrwl/devkit/testing");
const linter_1 = require("@nrwl/linter");
const library_1 = require("../library/library");
function createStorybookTestWorkspaceForLib(libName) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let tree = testing_1.createTreeWithEmptyWorkspace();
        const moduleGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@schematics/angular', 'module');
        const componentGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@schematics/angular', 'component');
        yield library_1.default(tree, {
            name: libName,
            buildable: false,
            enableIvy: false,
            linter: linter_1.Linter.EsLint,
            publishable: false,
            simpleModuleName: false,
            skipFormat: false,
            unitTestRunner: "jest" /* Jest */,
        });
        yield componentGenerator(tree, {
            name: 'test-button',
            project: libName,
        });
        tree.write(`libs/${libName}/src/lib/test-button/test-button.component.ts`, `import { Component, Input } from '@angular/core';

export type ButtonStyle = 'default' | 'primary' | 'accent';

@Component({
  selector: 'proj-test-button',
  templateUrl: './test-button.component.html',
  styleUrls: ['./test-button.component.css']
})
export class TestButtonComponent {
  @Input('buttonType') type = 'button';
  @Input() style: ButtonStyle = 'default';
  @Input() age?: number;
  @Input() isOn = false;
}`);
        tree.write(`libs/${libName}/src/lib/test-button/test-button.component.html`, `<button [attr.type]="type" [ngClass]="style"></button>`);
        const modulePath = `libs/${libName}/src/lib/${libName}.module.ts`;
        tree.write(modulePath, `import * as ButtonExports from './test-button/test-button.component';
    ${tree.read(modulePath)}`);
        // create a module with component that gets exported in a barrel file
        yield moduleGenerator(tree, {
            name: 'barrel',
            project: libName,
        });
        yield componentGenerator(tree, {
            name: 'barrel-button',
            project: libName,
            path: `libs/${libName}/src/lib/barrel`,
            module: 'barrel',
        });
        tree.write(`libs/${libName}/src/lib/barrel/barrel-button/index.ts`, `export * from './barrel-button.component';`);
        tree.write(`libs/${libName}/src/lib/barrel/barrel.module.ts`, `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BarrelButtonComponent } from './barrel-button';

@NgModule({
  imports: [CommonModule],
  declarations: [BarrelButtonComponent],
})
export class BarrelModule {}`);
        // create a module with components that get Angular exported and declared by variable
        yield moduleGenerator(tree, {
            name: 'variable-declare',
            project: libName,
        });
        yield componentGenerator(tree, {
            name: 'variable-declare-button',
            project: libName,
            path: `libs/${libName}/src/lib/variable-declare`,
            module: 'variable-declare',
        });
        yield componentGenerator(tree, {
            name: 'variable-declare-view',
            project: libName,
            path: `libs/${libName}/src/lib/variable-declare`,
            module: 'variable-declare',
        });
        tree.write(`libs/${libName}/src/lib/variable-declare/variable-declare.module.ts`, `import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { VariableDeclareButtonComponent } from './variable-declare-button/variable-declare-button.component';
import { VariableDeclareViewComponent } from './variable-declare-view/variable-declare-view.component';

const COMPONENTS = [
  VariableDeclareButtonComponent,
  VariableDeclareViewComponent
]

@NgModule({
  imports: [CommonModule],
  declarations: COMPONENTS,
  exports: COMPONENTS
})
export class VariableDeclareModule {}`);
        // create another button in a nested subpath
        yield moduleGenerator(tree, {
            name: 'nested',
            project: libName,
            path: `libs/${libName}/src/lib`,
        });
        yield componentGenerator(tree, {
            name: 'nested-button',
            project: libName,
            module: 'nested',
            path: `libs/${libName}/src/lib/nested`,
        });
        yield componentGenerator(tree, {
            name: 'test-other',
            project: libName,
        });
        return tree;
    });
}
exports.createStorybookTestWorkspaceForLib = createStorybookTestWorkspaceForLib;
//# sourceMappingURL=testing.js.map