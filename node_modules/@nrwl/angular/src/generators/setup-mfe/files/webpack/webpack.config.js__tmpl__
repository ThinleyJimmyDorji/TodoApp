const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
const mf = require("@angular-architects/module-federation/webpack");
const path = require("path");

const sharedMappings = new mf.SharedMappings();
sharedMappings.register(path.join(__dirname, "../../tsconfig.base.json"), [
  /* mapped paths to share */
]);

module.exports = {
  output: {
    uniqueName: "<%= name %>",
    publicPath: "auto",
  },
  optimization: {
    runtimeChunk: false,
    minimize: false,
  },
  resolve: {
    alias: {
      ...sharedMappings.getAliases(),
    },
  },
  plugins: [
    new ModuleFederationPlugin({<% if(type === 'remote') { %>
      name: "<%= name %>",
      filename: "remoteEntry.js",
      exposes: {
        './Module': '<%= sourceRoot %>/src/app/remote-entry/entry.module.ts',
      },<% } %><% if(type === 'host') { %>
      remotes: {
      <% remotes.forEach(function(remote) { %>"<%= remote.remoteName %>": "<%= remote.remoteName %>@http://localhost:<%= remote.port %>/remoteEntry.js",<% }); %>
      },<% } %>
      shared: {<% sharedLibraries.forEach(function (lib) { %>
        "<%= lib %>": { singleton: true, strictVersion: true },<% }); %>
        ...sharedMappings.getDescriptors(),
      },
    }),
    sharedMappings.getPlugin(),
  ],
};
