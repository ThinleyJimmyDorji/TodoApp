"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const devkit_2 = require("@nrwl/devkit");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
const workspace_1 = require("@nrwl/workspace");
const init_1 = require("../init/init");
const lib_1 = require("./lib");
const add_unit_test_runner_1 = require("./lib/add-unit-test-runner");
function applicationGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = lib_1.normalizeOptions(host, schema);
        // Determine the roots where @schematics/angular will place the projects
        // This is not where the projects actually end up
        const workspaceJson = devkit_2.readJson(host, devkit_2.getWorkspacePath(host));
        const appProjectRoot = workspaceJson.newProjectRoot
            ? `${workspaceJson.newProjectRoot}/${options.name}`
            : options.name;
        const e2eProjectRoot = workspaceJson.newProjectRoot
            ? `${workspaceJson.newProjectRoot}/${options.e2eProjectName}`
            : `${options.name}/e2e`;
        yield init_1.default(host, Object.assign(Object.assign({}, options), { skipFormat: true }));
        const angularAppSchematic = ngcli_adapter_1.wrapAngularDevkitSchematic('@schematics/angular', 'application');
        yield angularAppSchematic(host, {
            name: options.name,
            inlineStyle: options.inlineStyle,
            inlineTemplate: options.inlineTemplate,
            prefix: options.prefix,
            skipTests: options.skipTests,
            style: options.style,
            viewEncapsulation: options.viewEncapsulation,
            routing: false,
            skipInstall: true,
            skipPackageJson: false,
        });
        lib_1.createFiles(host, options, appProjectRoot);
        devkit_2.moveFilesToNewDirectory(host, appProjectRoot, options.appProjectRoot);
        lib_1.updateConfigFiles(host, options);
        lib_1.updateComponentTemplate(host, options);
        lib_1.updateComponentStyles(host, options);
        if (options.unitTestRunner !== "none" /* None */) {
            lib_1.updateComponentSpec(host, options);
        }
        if (options.routing) {
            lib_1.addRouterRootConfiguration(host, options);
        }
        lib_1.addLinting(host, options);
        yield add_unit_test_runner_1.addUnitTestRunner(host, options);
        yield lib_1.addE2e(host, options, e2eProjectRoot);
        lib_1.updateEditorTsConfig(host, options);
        if (options.backendProject) {
            lib_1.addProxyConfig(host, options);
        }
        if (options.strict) {
            lib_1.enableStrictTypeChecking(host, options);
        }
        else {
            lib_1.setApplicationStrictDefault(host, false);
        }
        if (options.standaloneConfig ||
            devkit_1.getWorkspaceLayout(host).standaloneAsDefault) {
            yield workspace_1.convertToNxProjectGenerator(host, {
                project: options.name,
                all: false,
            });
        }
        if (options.mfe) {
            yield lib_1.addMfe(host, options);
        }
        if (!options.skipFormat) {
            yield devkit_2.formatFiles(host);
        }
        return () => {
            devkit_2.installPackagesTask(host);
        };
    });
}
exports.applicationGenerator = applicationGenerator;
exports.default = applicationGenerator;
//# sourceMappingURL=application.js.map