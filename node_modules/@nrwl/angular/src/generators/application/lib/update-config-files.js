"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfigFiles = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const workspace_1 = require("@nrwl/workspace");
function updateConfigFiles(host, options) {
    addProjectToNx(host, options);
    updateTsConfigCompilerOptions(host, options);
    updateAppAndE2EProjectConfigurations(host, options);
}
exports.updateConfigFiles = updateConfigFiles;
function addProjectToNx(host, options) {
    // nx.json
    devkit_1.updateJson(host, '/nx.json', (json) => {
        const resultJson = Object.assign(Object.assign({}, json), { projects: Object.assign(Object.assign({}, json.projects), { [options.name]: { tags: options.parsedTags } }) });
        if (options.e2eTestRunner === 'protractor') {
            resultJson.projects[options.e2eProjectName] = { tags: [] };
            resultJson.projects[options.e2eProjectName].implicitDependencies = [
                options.name,
            ];
        }
        return resultJson;
    });
}
function updateTsConfigCompilerOptions(host, options) {
    // tsconfig.app.json
    devkit_1.updateJson(host, `${options.appProjectRoot}/tsconfig.app.json`, (json) => (Object.assign(Object.assign({}, json), { extends: './tsconfig.json', compilerOptions: Object.assign(Object.assign({}, json.compilerOptions), { outDir: `${devkit_1.offsetFromRoot(options.appProjectRoot)}dist/out-tsc` }) })));
}
function updateAppAndE2EProjectConfigurations(host, options) {
    // workspace.json
    const project = devkit_1.readProjectConfiguration(host, options.name);
    let fixedProject = workspace_1.replaceAppNameWithPath(project, options.name, options.appProjectRoot);
    delete fixedProject.targets.test;
    // Ensure the outputs property comes after the executor for
    // better readability.
    const _a = fixedProject.targets.build, { executor } = _a, rest = tslib_1.__rest(_a, ["executor"]);
    fixedProject.targets.build = Object.assign({ executor, outputs: ['{options.outputPath}'] }, rest);
    if (fixedProject.generators) {
        delete fixedProject.generators;
    }
    devkit_1.updateProjectConfiguration(host, options.name, fixedProject);
    if (options.unitTestRunner === "none" /* None */) {
        host.delete(`${options.appProjectRoot}/src/app/app.component.spec.ts`);
        host.delete(`${options.appProjectRoot}/tsconfig.spec.json`);
    }
    if (options.e2eTestRunner === "none" /* None */) {
        const projects = devkit_1.getProjects(host);
        if (projects.has(options.e2eProjectName)) {
            devkit_1.removeProjectConfiguration(host, options.e2eProjectName);
        }
    }
    // delete some default test configs
    host.delete(`${options.appProjectRoot}/karma.conf.js`);
    host.delete(`${options.appProjectRoot}/src/test.ts`);
}
//# sourceMappingURL=update-config-files.js.map