"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateE2eProject = void 0;
const devkit_1 = require("@nrwl/devkit");
function updateE2eProject(tree, options) {
    const spec = `${options.e2eProjectRoot}/src/app.e2e-spec.ts`;
    const content = tree.read(spec, 'utf-8');
    tree.write(spec, content.replace(`${options.name} app is running!`, `Welcome to ${options.name}!`));
    const page = `${options.e2eProjectRoot}/src/app.po.ts`;
    const pageContent = tree.read(page, 'utf-8');
    tree.write(page, pageContent.replace(`.content span`, `header h1`));
    const proj = devkit_1.readProjectConfiguration(tree, options.name);
    const project = {
        root: options.e2eProjectRoot,
        projectType: 'application',
        targets: {
            e2e: proj.targets.e2e,
        },
    };
    project.targets.e2e.options.protractorConfig = `${options.e2eProjectRoot}/protractor.conf.js`;
    // update workspace.json / angular.json
    devkit_1.addProjectConfiguration(tree, options.e2eProjectName, project);
    delete proj.targets.e2e;
    devkit_1.updateProjectConfiguration(tree, options.name, proj);
    // update tsconfig e2e
    if (!tree.exists(`${options.e2eProjectRoot}/tsconfig.e2e.json`)) {
        tree.write(`${options.e2eProjectRoot}/tsconfig.e2e.json`, '{}');
    }
    devkit_1.updateJson(tree, `${options.e2eProjectRoot}/tsconfig.e2e.json`, (json) => {
        return Object.assign(Object.assign({}, json), { extends: `./tsconfig.json`, compilerOptions: Object.assign(Object.assign({}, json.compilerOptions), { outDir: `${devkit_1.offsetFromRoot(options.e2eProjectRoot)}dist/out-tsc` }) });
    });
    // update tsconfig
    devkit_1.updateJson(tree, `${options.e2eProjectRoot}/tsconfig.json`, (json) => {
        return Object.assign(Object.assign({}, json), { extends: `${devkit_1.offsetFromRoot(options.e2eProjectRoot)}tsconfig.base.json` });
    });
}
exports.updateE2eProject = updateE2eProject;
//# sourceMappingURL=update-e2e-project.js.map