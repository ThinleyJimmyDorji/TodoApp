"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const devkit_1 = require("@nrwl/devkit");
const devkit_2 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
function normalizeOptions(host, schema) {
    var _a;
    // Create a schema with populated default values
    const options = Object.assign({ buildable: false, enableIvy: false, linter: linter_1.Linter.EsLint, name: '', publishable: false, simpleModuleName: false, skipFormat: false, unitTestRunner: "jest" /* Jest */ }, schema);
    const name = devkit_2.names(options.name).fileName;
    const projectDirectory = options.directory
        ? `${devkit_2.names(options.directory).fileName}/${name}`
        : name;
    const { libsDir, npmScope } = devkit_1.getWorkspaceLayout(host);
    const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const fileName = options.simpleModuleName ? name : projectName;
    const projectRoot = `${libsDir}/${projectDirectory}`;
    const moduleName = `${devkit_2.names(fileName).className}Module`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const modulePath = `${projectRoot}/src/lib/${fileName}.module.ts`;
    const defaultPrefix = npmScope;
    const importPath = options.importPath || `@${defaultPrefix}/${projectDirectory}`;
    return Object.assign(Object.assign({}, options), { prefix: (_a = options.prefix) !== null && _a !== void 0 ? _a : defaultPrefix, name: projectName, projectRoot, entryFile: 'index', moduleName,
        projectDirectory,
        modulePath,
        parsedTags,
        fileName,
        importPath });
}
exports.normalizeOptions = normalizeOptions;
//# sourceMappingURL=normalize-options.js.map