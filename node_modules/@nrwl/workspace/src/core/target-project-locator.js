"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetProjectLocator = void 0;
const typescript_1 = require("../utilities/typescript");
const file_utils_1 = require("./file-utils");
const devkit_1 = require("@nrwl/devkit");
const project_graph_1 = require("./project-graph");
const fileutils_1 = require("../utilities/fileutils");
const path_1 = require("path");
const app_root_1 = require("@nrwl/tao/src/utils/app-root");
class TargetProjectLocator {
    constructor(nodes) {
        var _a, _b;
        this.nodes = nodes;
        this.sortedProjects = project_graph_1.getSortedProjectNodes(this.nodes);
        this.sortedWorkspaceProjects = this.sortedProjects
            .filter(project_graph_1.isWorkspaceProject)
            .map((node) => (Object.assign(Object.assign({}, node), { data: Object.assign(Object.assign({}, node.data), { normalizedRoot: file_utils_1.normalizedProjectRoot(node) }) })));
        this.npmProjects = this.sortedProjects.filter(project_graph_1.isNpmProject);
        this.tsConfig = this.getRootTsConfig();
        this.paths = (_b = (_a = this.tsConfig.config) === null || _a === void 0 ? void 0 : _a.compilerOptions) === null || _b === void 0 ? void 0 : _b.paths;
        this.typescriptResolutionCache = new Map();
        this.npmResolutionCache = new Map();
    }
    /**
     * Find a project based on its import
     *
     * @param importExpr
     * @param filePath
     * @param npmScope
     *  Npm scope shouldn't be used finding a project, but, to improve backward
     *  compatibility, we fallback to checking the scope.
     *  This happens in cases where someone has the dist output in their tsconfigs
     *  and typescript will find the dist before the src.
     */
    findProjectWithImport(importExpr, filePath, npmScope) {
        const normalizedImportExpr = importExpr.split('#')[0];
        if (fileutils_1.isRelativePath(normalizedImportExpr)) {
            const resolvedModule = path_1.posix.join(path_1.dirname(filePath), normalizedImportExpr);
            return this.findProjectOfResolvedModule(resolvedModule);
        }
        const paths = this.findPaths(normalizedImportExpr);
        if (paths) {
            for (let p of paths) {
                const maybeResolvedProject = this.findProjectOfResolvedModule(p);
                if (maybeResolvedProject) {
                    return maybeResolvedProject;
                }
            }
        }
        // try to find npm package before using expensive typescript resolution
        const npmProject = this.findNpmPackage(normalizedImportExpr);
        if (npmProject) {
            return npmProject;
        }
        // TODO(meeroslav): this block is probably obsolete
        // and existed only because of the incomplete `paths` matching
        // if import cannot be matched using tsconfig `paths` the compilation would fail anyway
        const resolvedProject = this.resolveImportWithTypescript(normalizedImportExpr, filePath);
        if (resolvedProject) {
            return resolvedProject;
        }
        // TODO(meeroslav): this block should be removed as it's going around typescript paths
        // unless we want to support local JS projects
        const importedProject = this.sortedWorkspaceProjects.find((p) => {
            const projectImport = `@${npmScope}/${p.data.normalizedRoot}`;
            return (normalizedImportExpr === projectImport ||
                normalizedImportExpr.startsWith(`${projectImport}/`));
        });
        if (importedProject) {
            return importedProject.name;
        }
        // nothing found, cache for later
        this.npmResolutionCache.set(normalizedImportExpr, undefined);
        return null;
    }
    findPaths(normalizedImportExpr) {
        if (!this.paths) {
            return undefined;
        }
        if (this.paths[normalizedImportExpr]) {
            return this.paths[normalizedImportExpr];
        }
        const wildcardPath = Object.keys(this.paths).find((path) => path.endsWith('/*') &&
            normalizedImportExpr.startsWith(path.replace(/\/\*$/, '')));
        if (wildcardPath) {
            return this.paths[wildcardPath];
        }
        return undefined;
    }
    resolveImportWithTypescript(normalizedImportExpr, filePath) {
        let resolvedModule;
        if (this.typescriptResolutionCache.has(normalizedImportExpr)) {
            resolvedModule = this.typescriptResolutionCache.get(normalizedImportExpr);
        }
        else {
            resolvedModule = typescript_1.resolveModuleByImport(normalizedImportExpr, filePath, this.tsConfig.absolutePath);
            this.typescriptResolutionCache.set(normalizedImportExpr, resolvedModule ? resolvedModule : null);
        }
        // TODO: vsavkin temporary workaround. Remove it once we reworking handling of npm packages.
        if (resolvedModule && resolvedModule.indexOf('node_modules/') === -1) {
            const resolvedProject = this.findProjectOfResolvedModule(resolvedModule);
            if (resolvedProject) {
                return resolvedProject;
            }
        }
        return;
    }
    findNpmPackage(npmImport) {
        if (this.npmResolutionCache.has(npmImport)) {
            return this.npmResolutionCache.get(npmImport);
        }
        else {
            const pkg = this.npmProjects.find((pkg) => npmImport === pkg.data.packageName ||
                npmImport.startsWith(`${pkg.data.packageName}/`));
            if (pkg) {
                this.npmResolutionCache.set(npmImport, pkg.name);
                return pkg.name;
            }
        }
    }
    findProjectOfResolvedModule(resolvedModule) {
        const normalizedModulePath = this.getAbsolutePath(resolvedModule);
        const importedProject = this.sortedWorkspaceProjects.find((p) => {
            return normalizedModulePath.startsWith(this.getAbsolutePath(p.data.root));
        });
        return importedProject ? importedProject.name : void 0;
    }
    getAbsolutePath(path) {
        return path_1.join(app_root_1.appRootPath, path);
    }
    getRootTsConfig() {
        let path = 'tsconfig.base.json';
        let absolutePath = this.getAbsolutePath(path);
        let content = file_utils_1.readFileIfExisting(absolutePath);
        if (!content) {
            path = 'tsconfig.json';
            absolutePath = this.getAbsolutePath(path);
            content = file_utils_1.readFileIfExisting(absolutePath);
        }
        return { path, absolutePath, config: devkit_1.parseJson(content) };
    }
}
exports.TargetProjectLocator = TargetProjectLocator;
//# sourceMappingURL=target-project-locator.js.map