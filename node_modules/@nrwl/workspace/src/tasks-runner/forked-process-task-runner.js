"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForkedProcessTaskRunner = void 0;
const fs_1 = require("fs");
const dotenv = require("dotenv");
const child_process_1 = require("child_process");
const app_root_1 = require("@nrwl/tao/src/utils/app-root");
const output_1 = require("../utilities/output");
const utils_1 = require("./utils");
const path_1 = require("path");
const batch_messages_1 = require("./batch/batch-messages");
const workerPath = path_1.join(__dirname, './batch/run-batch.js');
class ForkedProcessTaskRunner {
    constructor(options) {
        this.options = options;
        this.workspaceRoot = app_root_1.appRootPath;
        this.cliPath = utils_1.getCliPath(this.workspaceRoot);
        this.processes = new Set();
        this.setupOnProcessExitListener();
    }
    forkProcessForBatch({ executorName, taskGraph }) {
        return new Promise((res, rej) => {
            try {
                const env = this.envForForkedProcessForTarget(taskGraph.tasks[0].target.target, process.env.FORCE_COLOR === undefined
                    ? 'true'
                    : process.env.FORCE_COLOR);
                const count = Object.keys(taskGraph.tasks).length;
                if (count > 1) {
                    output_1.output.logSingleLine(`Running ${output_1.output.bold(count)} ${output_1.output.bold('tasks')} with ${output_1.output.bold(executorName)}`);
                }
                else {
                    const args = utils_1.getCommandArgsForTask(Object.values(taskGraph.tasks)[0]);
                    const commandLine = `nx ${args.join(' ')}`;
                    output_1.output.logCommand(commandLine);
                }
                const p = child_process_1.fork(workerPath, {
                    stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
                    env,
                });
                this.processes.add(p);
                p.once('exit', (code, signal) => {
                    if (code === null)
                        code = this.signalToCode(signal);
                    if (code !== 0) {
                        const results = {};
                        for (const rootTaskId of taskGraph.roots) {
                            results[rootTaskId] = {
                                success: false,
                            };
                        }
                        rej(new Error(`"${executorName}" exited unexpectedly with code: ${code}`));
                    }
                });
                p.on('message', (message) => {
                    switch (message.type) {
                        case batch_messages_1.BatchMessageType.Complete: {
                            res(message.results);
                        }
                    }
                });
                // Start the tasks
                p.send({
                    type: batch_messages_1.BatchMessageType.Tasks,
                    taskGraph,
                    executorName,
                });
            }
            catch (e) {
                rej(e);
            }
        });
    }
    forkProcessPipeOutputCapture(task, { forwardOutput }) {
        return new Promise((res, rej) => {
            try {
                const env = this.envForForkedProcessForTask(task, process.env.FORCE_COLOR === undefined
                    ? 'true'
                    : process.env.FORCE_COLOR, undefined, forwardOutput);
                const args = utils_1.getCommandArgsForTask(task);
                const commandLine = `nx ${args.join(' ')}`;
                if (forwardOutput) {
                    output_1.output.logCommand(commandLine);
                }
                const p = child_process_1.fork(this.cliPath, args, {
                    stdio: ['inherit', 'pipe', 'pipe', 'ipc'],
                    env,
                });
                this.processes.add(p);
                let out = [];
                let outWithErr = [];
                p.stdout.on('data', (chunk) => {
                    if (forwardOutput) {
                        process.stdout.write(chunk);
                    }
                    out.push(chunk.toString());
                    outWithErr.push(chunk.toString());
                });
                p.stderr.on('data', (chunk) => {
                    if (forwardOutput) {
                        process.stderr.write(chunk);
                    }
                    outWithErr.push(chunk.toString());
                });
                p.on('exit', (code, signal) => {
                    if (code === null)
                        code = this.signalToCode(signal);
                    // we didn't print any output as we were running the command
                    // print all the collected output|
                    const terminalOutput = outWithErr.join('');
                    if (!forwardOutput) {
                        output_1.output.logCommand(commandLine);
                        process.stdout.write(terminalOutput);
                    }
                    res({ code, terminalOutput });
                });
            }
            catch (e) {
                console.error(e);
                rej(e);
            }
        });
    }
    forkProcessDirectOutputCapture(task, { forwardOutput, temporaryOutputPath, }) {
        return new Promise((res, rej) => {
            try {
                const env = this.envForForkedProcessForTask(task, undefined, temporaryOutputPath, forwardOutput);
                const args = utils_1.getCommandArgsForTask(task);
                const commandLine = `nx ${args.join(' ')}`;
                if (forwardOutput) {
                    output_1.output.logCommand(commandLine);
                }
                const p = child_process_1.fork(this.cliPath, args, {
                    stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
                    env,
                });
                this.processes.add(p);
                p.on('exit', (code, signal) => {
                    if (code === null)
                        code = this.signalToCode(signal);
                    // we didn't print any output as we were running the command
                    // print all the collected output
                    const terminalOutput = this.readTerminalOutput(temporaryOutputPath);
                    if (!forwardOutput) {
                        output_1.output.logCommand(commandLine);
                        if (terminalOutput) {
                            process.stdout.write(terminalOutput);
                        }
                        else {
                            console.error(`Nx could not find process's output. Run the command without --parallel.`);
                        }
                    }
                    res({
                        code,
                        terminalOutput,
                    });
                });
            }
            catch (e) {
                console.error(e);
                rej(e);
            }
        });
    }
    readTerminalOutput(outputPath) {
        try {
            return fs_1.readFileSync(outputPath).toString();
        }
        catch (e) {
            return null;
        }
    }
    envForForkedProcess(forceColor, outputPath, forwardOutput) {
        const env = Object.assign(Object.assign({ FORCE_COLOR: forceColor }, process.env), { NX_INVOKED_BY_RUNNER: 'true', NX_WORKSPACE_ROOT: this.workspaceRoot });
        if (outputPath) {
            env.NX_TERMINAL_OUTPUT_PATH = outputPath;
            if (this.options.captureStderr) {
                env.NX_TERMINAL_CAPTURE_STDERR = 'true';
            }
            if (forwardOutput) {
                env.NX_FORWARD_OUTPUT = 'true';
            }
        }
        return env;
    }
    envForForkedProcessForTarget(target, forceColor, outputPath, forwardOutput) {
        const envsFromFiles = Object.assign(Object.assign(Object.assign(Object.assign({}, parseEnv('.env')), parseEnv('.local.env')), parseEnv(`.${target}.env`)), parseEnv(`.env.${target}`));
        const env = Object.assign(Object.assign({}, envsFromFiles), this.envForForkedProcess(forceColor, outputPath, forwardOutput));
        return env;
    }
    envForForkedProcessForTask(task, forceColor, outputPath, forwardOutput) {
        const envsFromFiles = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, parseEnv('.env')), parseEnv('.local.env')), parseEnv('.env.local')), parseEnv(`.${task.target.target}.env`)), parseEnv(`.env.${task.target.target}`)), parseEnv(`${task.projectRoot}/.env`)), parseEnv(`${task.projectRoot}/.local.env`)), parseEnv(`${task.projectRoot}/.env.local`)), parseEnv(`${task.projectRoot}/.${task.target.target}.env`)), parseEnv(`${task.projectRoot}/.env.${task.target.target}`));
        const env = Object.assign(Object.assign(Object.assign({}, envsFromFiles), this.envForForkedProcess(forceColor, outputPath, forwardOutput)), { NX_TASK_TARGET_PROJECT: task.target.project, NX_TASK_HASH: task.hash });
        // TODO: remove this once we have a reasonable way to configure it
        if (task.target.target === 'test') {
            env.NX_TERMINAL_CAPTURE_STDERR = 'true';
        }
        return env;
    }
    signalToCode(signal) {
        if (signal === 'SIGHUP')
            return 128 + 1;
        if (signal === 'SIGINT')
            return 128 + 2;
        if (signal === 'SIGTERM')
            return 128 + 15;
        return 128;
    }
    setupOnProcessExitListener() {
        process.on('SIGINT', () => {
            this.processes.forEach((p) => {
                p.kill('SIGTERM');
            });
            // we exit here because we don't need to write anything to cache.
            process.exit();
        });
        process.on('SIGTERM', () => {
            this.processes.forEach((p) => {
                p.kill('SIGTERM');
            });
            // no exit here because we expect child processes to terminate which
            // will store results to the cache and will terminate this process
        });
        process.on('SIGHUP', () => {
            this.processes.forEach((p) => {
                p.kill('SIGTERM');
            });
            // no exit here because we expect child processes to terminate which
            // will store results to the cache and will terminate this process
        });
    }
}
exports.ForkedProcessTaskRunner = ForkedProcessTaskRunner;
function parseEnv(path) {
    try {
        const envContents = fs_1.readFileSync(path);
        return dotenv.parse(envContents);
    }
    catch (e) { }
}
//# sourceMappingURL=forked-process-task-runner.js.map