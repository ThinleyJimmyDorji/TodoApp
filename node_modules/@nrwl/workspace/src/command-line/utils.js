"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAffectedConfig = exports.splitArgsIntoNxArgsAndOverrides = void 0;
const yargsParser = require("yargs-parser");
const file_utils_1 = require("../core/file-utils");
const output_1 = require("../utilities/output");
const devkit_1 = require("@nrwl/devkit");
const runOne = [
    'target',
    'configuration',
    'prod',
    'runner',
    'parallel',
    'max-parallel',
    'exclude',
    'only-failed',
    'help',
    'with-deps',
    'skip-nx-cache',
    'scan',
    'hide-cached-output',
];
const runMany = [...runOne, 'projects', 'all'];
const runAffected = [
    ...runOne,
    'untracked',
    'uncommitted',
    'all',
    'base',
    'head',
    'files',
    'plain',
    'select',
];
const ignoreArgs = ['$0', '_'];
function splitArgsIntoNxArgsAndOverrides(args, mode, options = { printWarnings: true }) {
    const nxSpecific = mode === 'run-one' ? runOne : mode === 'run-many' ? runMany : runAffected;
    const nxArgs = {};
    const overrides = yargsParser(args._, {
        configuration: {
            'strip-dashed': true,
        },
    });
    // This removes the overrides from the nxArgs._
    args._ = overrides._;
    delete overrides._;
    Object.entries(args).forEach(([key, value]) => {
        const dasherized = devkit_1.names(key).fileName;
        if (nxSpecific.includes(dasherized) || dasherized.startsWith('nx-')) {
            nxArgs[key] = value;
        }
        else if (!ignoreArgs.includes(key)) {
            overrides[key] = value;
        }
    });
    if (mode === 'run-many') {
        if (!nxArgs.projects) {
            nxArgs.projects = [];
        }
        else {
            nxArgs.projects = args.projects
                .split(',')
                .map((p) => p.trim());
        }
    }
    if (nxArgs.prod) {
        delete nxArgs.prod;
        nxArgs.configuration = 'production';
    }
    if (mode === 'affected') {
        if (options.printWarnings && nxArgs.all) {
            output_1.output.warn({
                title: `Running affected:* commands with --all can result in very slow builds.`,
                bodyLines: [
                    `${output_1.output.bold('--all')} is not meant to be used for any sizable project or to be used in CI.`,
                    '',
                    `${output_1.output.colors.gray('Learn more about checking only what is affected: ')}https://nx.dev/latest/angular/cli/affected#affected.`,
                ],
            });
        }
        if (!nxArgs.files &&
            !nxArgs.uncommitted &&
            !nxArgs.untracked &&
            !nxArgs.base &&
            !nxArgs.head &&
            !nxArgs.all &&
            args._.length >= 3) {
            nxArgs.base = args._[1];
            nxArgs.head = args._[2];
        }
        // Allow setting base and head via environment variables (lower priority then direct command arguments)
        if (!nxArgs.base && process.env.NX_BASE) {
            nxArgs.base = process.env.NX_BASE;
            if (options.printWarnings) {
                output_1.output.note({
                    title: `No explicit --base argument provided, but found environment variable NX_BASE so using its value as the affected base: ${output_1.output.bold(`${nxArgs.base}`)}`,
                });
            }
        }
        if (!nxArgs.head && process.env.NX_HEAD) {
            nxArgs.head = process.env.NX_HEAD;
            if (options.printWarnings) {
                output_1.output.note({
                    title: `No explicit --head argument provided, but found environment variable NX_HEAD so using its value as the affected head: ${output_1.output.bold(`${nxArgs.head}`)}`,
                });
            }
        }
        if (!nxArgs.base) {
            const affectedConfig = getAffectedConfig();
            nxArgs.base = affectedConfig.defaultBase;
            // No user-provided arguments to set the affected criteria, so inform the user of the defaults being used
            if (options.printWarnings &&
                !nxArgs.head &&
                !nxArgs.files &&
                !nxArgs.uncommitted &&
                !nxArgs.untracked &&
                !nxArgs.all) {
                output_1.output.note({
                    title: `Affected criteria defaulted to --base=${output_1.output.bold(`${nxArgs.base}`)} --head=${output_1.output.bold('HEAD')}`,
                });
            }
        }
    }
    if (!nxArgs.skipNxCache) {
        nxArgs.skipNxCache = false;
    }
    return { nxArgs, overrides };
}
exports.splitArgsIntoNxArgsAndOverrides = splitArgsIntoNxArgsAndOverrides;
function getAffectedConfig() {
    var _a;
    const config = file_utils_1.readNxJson();
    return {
        defaultBase: ((_a = config.affected) === null || _a === void 0 ? void 0 : _a.defaultBase) || 'master',
    };
}
exports.getAffectedConfig = getAffectedConfig;
//# sourceMappingURL=utils.js.map