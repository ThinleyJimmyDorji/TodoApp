import { ObservableStore, stateFunc } from '../observable-store';
export interface MockUser {
    name: string;
    address?: MockAddress;
}
export interface MockAddress {
    city: string;
    state: string;
    zip: number;
}
export interface MockState {
    prop1: string;
    prop2: string;
    user: MockUser;
    users: MockUser[];
    map?: Map<any, any>;
}
export declare class MockStore extends ObservableStore<MockState> {
    updateProp1(value: string, cloneState?: boolean): void;
    updateForTestAction(value: string, action: string, cloneState?: boolean): void;
    updateUsingAFunction(func: stateFunc<MockState>, cloneState?: boolean): void;
    get currentState(): MockState;
}
export declare function getUser(): any;
export declare class UserStore extends ObservableStore<MockState> {
    constructor(settings: any);
    updateUser(user: MockUser, deepCloneState?: boolean): void;
    updateMap(map: Map<any, any>, deepCloneState?: boolean): void;
    addToUsers(user: MockUser, deepCloneState?: boolean): void;
    getCurrentState(deepCloneReturnedState?: boolean): MockState;
    get currentState(): MockState;
}
