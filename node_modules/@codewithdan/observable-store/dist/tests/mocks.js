var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserStore = exports.getUser = exports.MockStore = void 0;
var observable_store_1 = require("../observable-store");
var cloner_service_1 = require("../utilities/cloner.service");
var Update_Prop1 = 'Update_Prop1';
var MockStore = /** @class */ (function (_super) {
    __extends(MockStore, _super);
    function MockStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MockStore.prototype.updateProp1 = function (value, cloneState) {
        if (cloneState === void 0) { cloneState = true; }
        this.setState({ prop1: value }, Update_Prop1, cloneState);
    };
    MockStore.prototype.updateForTestAction = function (value, action, cloneState) {
        if (cloneState === void 0) { cloneState = true; }
        this.setState({ prop1: value }, action, true, cloneState);
    };
    MockStore.prototype.updateUsingAFunction = function (func, cloneState) {
        if (cloneState === void 0) { cloneState = true; }
        this.setState(function (prevState) {
            return func(prevState);
        }, 'Update Using a Function', true, cloneState);
    };
    Object.defineProperty(MockStore.prototype, "currentState", {
        get: function () {
            return this.getState();
        },
        enumerable: false,
        configurable: true
    });
    return MockStore;
}(observable_store_1.ObservableStore));
exports.MockStore = MockStore;
var user = { name: 'foo', address: { city: 'Phoenix', state: 'AZ', zip: 85349 } };
var cloner = new cloner_service_1.ClonerService();
function getUser() {
    return cloner.deepClone(user);
}
exports.getUser = getUser;
var UserStore = /** @class */ (function (_super) {
    __extends(UserStore, _super);
    function UserStore(settings) {
        var _this = _super.call(this, settings) || this;
        // this.setState(null, 'Initialize');
        _this.resetStateHistory();
        return _this;
    }
    UserStore.prototype.updateUser = function (user, deepCloneState) {
        if (deepCloneState === void 0) { deepCloneState = true; }
        this.setState({ user: user }, 'Update User', true, deepCloneState);
    };
    UserStore.prototype.updateMap = function (map, deepCloneState) {
        if (deepCloneState === void 0) { deepCloneState = true; }
        this.setState({ map: map }, 'Update Map', true, deepCloneState);
    };
    UserStore.prototype.addToUsers = function (user, deepCloneState) {
        if (deepCloneState === void 0) { deepCloneState = true; }
        var state = this.getState(deepCloneState);
        var users = (state && state.users) ? state.users : [];
        users.push(user);
        this.setState({ users: users }, 'Update Users', true, deepCloneState);
    };
    UserStore.prototype.getCurrentState = function (deepCloneReturnedState) {
        if (deepCloneReturnedState === void 0) { deepCloneReturnedState = true; }
        return this.getState(deepCloneReturnedState);
    };
    Object.defineProperty(UserStore.prototype, "currentState", {
        get: function () {
            return this.getState();
        },
        enumerable: false,
        configurable: true
    });
    return UserStore;
}(observable_store_1.ObservableStore));
exports.UserStore = UserStore;
//# sourceMappingURL=mocks.js.map